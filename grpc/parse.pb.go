// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/parse.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PathsToFiles struct {
	InputFilePath        string   `protobuf:"bytes,1,opt,name=inputFilePath,proto3" json:"inputFilePath,omitempty"`
	OutputFilePath       string   `protobuf:"bytes,2,opt,name=outputFilePath,proto3" json:"outputFilePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathsToFiles) Reset()         { *m = PathsToFiles{} }
func (m *PathsToFiles) String() string { return proto.CompactTextString(m) }
func (*PathsToFiles) ProtoMessage()    {}
func (*PathsToFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_45ca05ae33deab4e, []int{0}
}

func (m *PathsToFiles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathsToFiles.Unmarshal(m, b)
}
func (m *PathsToFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathsToFiles.Marshal(b, m, deterministic)
}
func (m *PathsToFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathsToFiles.Merge(m, src)
}
func (m *PathsToFiles) XXX_Size() int {
	return xxx_messageInfo_PathsToFiles.Size(m)
}
func (m *PathsToFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_PathsToFiles.DiscardUnknown(m)
}

var xxx_messageInfo_PathsToFiles proto.InternalMessageInfo

func (m *PathsToFiles) GetInputFilePath() string {
	if m != nil {
		return m.InputFilePath
	}
	return ""
}

func (m *PathsToFiles) GetOutputFilePath() string {
	if m != nil {
		return m.OutputFilePath
	}
	return ""
}

type Result struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_45ca05ae33deab4e, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*PathsToFiles)(nil), "grpc.PathsToFiles")
	proto.RegisterType((*Result)(nil), "grpc.Result")
}

func init() { proto.RegisterFile("grpc/parse.proto", fileDescriptor_45ca05ae33deab4e) }

var fileDescriptor_45ca05ae33deab4e = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x48, 0x2c, 0x2a, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0x89,
	0x28, 0xc5, 0x70, 0xf1, 0x04, 0x24, 0x96, 0x64, 0x14, 0x87, 0xe4, 0xbb, 0x65, 0xe6, 0xa4, 0x16,
	0x0b, 0xa9, 0x70, 0xf1, 0x66, 0xe6, 0x15, 0x94, 0x96, 0x80, 0x78, 0x20, 0x09, 0x09, 0x46, 0x05,
	0x46, 0x0d, 0xce, 0x20, 0x54, 0x41, 0x21, 0x35, 0x2e, 0xbe, 0xfc, 0xd2, 0x12, 0x64, 0x65, 0x4c,
	0x60, 0x65, 0x68, 0xa2, 0x4a, 0x16, 0x5c, 0x6c, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x42, 0x12,
	0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x50, 0x13, 0x61, 0x5c, 0x21, 0x11, 0x2e,
	0xd6, 0xd4, 0xa2, 0xa2, 0xfc, 0x22, 0xa8, 0x11, 0x10, 0x8e, 0x91, 0x35, 0xc8, 0x5d, 0x45, 0xc5,
	0xa9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xda, 0x5c, 0xac, 0x60, 0xbe, 0x90, 0x90,
	0x1e, 0xc8, 0xdd, 0x7a, 0xc8, 0x8e, 0x96, 0xe2, 0x81, 0x88, 0x41, 0xac, 0x52, 0x62, 0x48, 0x62,
	0x03, 0xfb, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xa4, 0xac, 0xad, 0x2d, 0xf5, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ParseServiceClient is the client API for ParseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ParseServiceClient interface {
	Parse(ctx context.Context, in *PathsToFiles, opts ...grpc.CallOption) (*Result, error)
}

type parseServiceClient struct {
	cc *grpc.ClientConn
}

func NewParseServiceClient(cc *grpc.ClientConn) ParseServiceClient {
	return &parseServiceClient{cc}
}

func (c *parseServiceClient) Parse(ctx context.Context, in *PathsToFiles, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/grpc.ParseService/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParseServiceServer is the server API for ParseService service.
type ParseServiceServer interface {
	Parse(context.Context, *PathsToFiles) (*Result, error)
}

// UnimplementedParseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedParseServiceServer struct {
}

func (*UnimplementedParseServiceServer) Parse(ctx context.Context, req *PathsToFiles) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}

func RegisterParseServiceServer(s *grpc.Server, srv ParseServiceServer) {
	s.RegisterService(&_ParseService_serviceDesc, srv)
}

func _ParseService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathsToFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParseServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.ParseService/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParseServiceServer).Parse(ctx, req.(*PathsToFiles))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.ParseService",
	HandlerType: (*ParseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _ParseService_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/parse.proto",
}
