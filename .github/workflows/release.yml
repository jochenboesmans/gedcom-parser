name: Go

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    environment: release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
    
    - name: Cross-compile
      run: bash ./crosscompile.sh

    # Create GitHub release with binaries for different architectures
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset 1
      id: upload-release-asset1
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: gedcom-parser.darwin.amd64.7z
        asset_name: gedcom-parser.darwin.amd64.7z
        asset_content_type: application/x-7z-compressed
    - name: Upload Release Asset 2
      id: upload-release-asset2
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: gedcom-parser.linux.amd64.7z
        asset_name: gedcom-parser.linux.amd64.7z
        asset_content_type: application/x-7z-compressed
    - name: Upload Release Asset 3
      id: upload-release-asset3
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: gedcom-parser.windows.amd64.7z
        asset_name: gedcom-parser.windows.amd64.7z
        asset_content_type: application/x-7z-compressed

    # Publish Docker image to GitHub
    - name: Determine variables for docker image
      id: determine-docker-image-vars
      run: |
        GHCR_IMAGE=ghcr.io/${{ github.repository_owner }}/gedcom-parser
        GHCR_TAGS=${GHCR_IMAGE}:${{ github.ref }}
        GHCR_LATEST=${GHCR_IMAGE}:latest
        echo ::set-output name=ghcr_tags::${GHCR_TAGS}
        echo ::set-output name=ghcr_latest::${GHCR_LATEST}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.CR_PAT }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: |
          ${{ steps.determine-docker-image-vars.outputs.ghcr_tags }}
          ${{ steps.determine-docker-image-vars.outputs.ghcr_latest }}
        context: .
        file: ./runner.Dockerfile
        platforms: linux/amd64,linux/arm64
